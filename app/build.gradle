def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY')
def buildAsApplication = !buildAsLibrary
if (buildAsApplication) {
    apply plugin: 'com.android.application'
}
else {
    apply plugin: 'com.android.library'
}

android {
    compileSdkVersion 30
    defaultConfig {
        if (buildAsApplication) {
            applicationId "org.libsdl.app"
        }
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        // This is used in APK build process, use this to control what supported platforms
        ndk {
            // Specifies the ABI configurations of your native
            // libraries Gradle should build and package with your APK.
            //abiFilters 'x86', 'x86_64', 'armeabi', 'armeabi-v7a',
            //        'arm64-v8a'
            abiFilters 'arm64-v8a'
        }

        //externalNativeBuild {
        //    ndkBuild {
        //        arguments "APP_PLATFORM=android-21"
        //        abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
		//		abiFilters 'arm64-v8a'
        //    }
        //    // cmake {
        //    //     arguments "-DANDROID_APP_PLATFORM=android-21", "-DANDROID_STL=c++_static"
        //    //     // abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        //    //     abiFilters 'arm64-v8a'
        //    // }
        //}
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            packagingOptions {
                doNotStrip '**/*.so'
            }
        }
        debug {
            debuggable true
            packagingOptions {
                doNotStrip '**/*.so'
            }
        }
        //customDebugType {
        //    debuggable true
        //    packagingOptions {
        //        doNotStrip '**/*.so'
        //    }
        //}
    }
    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir 'libs'
        }
        //externalNativeBuild {
        //    ndkBuild {
        //        path 'jni/Android.mk'
        //    }
        //    // cmake {
        //    //     path 'jni/CMakeLists.txt'
        //    // }
        //}
       
    }
    lintOptions {
        abortOnError false
    }
    
    if (buildAsLibrary) {
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith(".aar")) {
                    def fileName = "org.libsdl.app.aar"
                    output.outputFile = new File(outputFile.parent, fileName)
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}
